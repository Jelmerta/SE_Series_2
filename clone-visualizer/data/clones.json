[{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,\"\",[]),return(null())),declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[]))])),declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[]))])),declarationStatement(variables(void(),[variable(\"\",0,newObject(void(),[]))])),for([declarationExpression(variables(void(),[variable(\"\",0,number(\"0\"))]))],infix(simpleName(\"\"),\"\\<\",simpleName(\"\")),[postfix(simpleName(\"\"),\"++\")],block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))])),return(methodCall(false,simpleName(\"\"),\"\",[]))]))","amountOfDuplications":2,"treeSize":77,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionRepeat.java","lines":[60,61,62,63,64,65,66,67,68,69],"code":["final String getString() throws Exception {","if(isNull()) return null;","String str = param1.getString();","int count  = param2.getInt();","StringBuffer buffer = new StringBuffer();","for(int i=0; i<count; i++){","buffer.append(str);","}","return buffer.toString();","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionRepeat.java","lines":[48,49,50,51,52,53,54,55,56,57],"code":["final byte[] getBytes() throws Exception{","if(isNull()) return null;","byte[] bytes = param1.getBytes();","int count  = param2.getInt();","ByteArrayOutputStream buffer = new ByteArrayOutputStream();","for(int i=0; i<count; i++){","buffer.write(bytes);","}","return buffer.toByteArray();","}"],"amountOfLines":10}}]}},{"cloneClass":{"cloneClassName":"try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"v\\\"\")])),expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"SQLException \\'No current row\\' should be throw\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"01000\\\"\"),number(\"0\"),simpleName(\"\")]))]))])","amountOfDuplications":4,"treeSize":29,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestScrollable.java","lines":[172,173,174,175,176,177],"code":["try{","rs.getString(\"v\");","fail(\"SQLException 'No current row' should be throw\");","}catch(SQLException ex){","assertSQLException(\"01000\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestScrollable.java","lines":[134,135,136,137,138,139],"code":["try{","rs.getString(\"v\");","fail(\"SQLException 'No current row' should be throw\");","}catch(SQLException ex){","assertSQLException(\"01000\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestScrollable.java","lines":[66,67,68,69,70,71],"code":["try{","rs.getString(\"v\");","fail(\"SQLException 'No current row' should be throw\");","}catch(SQLException ex){","assertSQLException( \"01000\", 0, ex );","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestScrollable.java","lines":[98,99,100,101,102,103],"code":["try{","rs.getString(\"v\");","fail(\"SQLException 'No current row' should be throw\");","}catch(SQLException ex){","assertSQLException( \"01000\", 0, ex);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"constructor(\"\",[parameter(void(),\"\",0),parameter(void(),\"\",0),parameter(void(),\"\",0),parameter(void(),\"\",0)],[],block([constructorCall(true,[simpleName(\"\")]),expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\"))),expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\"))),expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\")))]))","amountOfDuplications":3,"treeSize":49,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/CreateFile.java","lines":[47,48,49,50,51,52],"code":["CreateFile(File file, FileChannel raFile,SSConnection con, Database database){","super(raFile);","this.file = file;","this.con = con;","this.database = database;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/StorePage.java","lines":[48,49,50,51,52,53],"code":["StorePage(byte[] page, int pageSize, FileChannel raFile, long fileOffset){","super(raFile);","this.page = page;","this.pageSize = pageSize;","this.fileOffset = fileOffset;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/CommandDrop.java","lines":[39,40,41,42,43,44],"code":["CommandDrop( Logger log, String catalog, String name, int type ){","super(log);","this.type \t\t= type;","this.catalog \t= catalog;","this.name \t\t= name;","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"compilationUnit(package(package(\"\"),\"\"),[],[class(\"\",[void()],[],[method(void(),\"\",[],[],block([return(qualifiedName(simpleName(\"\"),simpleName(\"\")))])),method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,\"\",[]),return(number(\"0\"))),return(methodCall(false,simpleName(\"\"),\"\",[methodCall(false,simpleName(\"\"),\"\",[])]))]))])])","amountOfDuplications":12,"treeSize":44,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionDegrees.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionDegrees extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.DEGREES; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.toDegrees( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionExp.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionExp extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.EXP; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.exp( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionCos.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionCos extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.COS; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.cos( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionRadians.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionRadians extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.RADIANS; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.toRadians( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionASin.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionASin extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.ASIN; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.asin( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionLog.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionLog extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.LOG; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.log( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionSqrt.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionSqrt extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.SQRT; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.sqrt( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionTan.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionTan extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.TAN; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.tan( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionACos.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionACos extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.ACOS; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.acos( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionCeiling.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionCeiling extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.CEILING; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.ceil( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionATan.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionATan extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.ATAN; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.atan( param1.getDouble() );","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionSin.java","lines":[32,35,37,39,40,41,42,43],"code":["package smallsql.database;","final class ExpressionFunctionSin extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.SIN; }","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.sin( param1.getDouble() );","}","}"],"amountOfLines":8}}]}},{"cloneClass":{"cloneClassName":"compilationUnit(package(package(\"\"),\"\"),[],[class(\"\",[void()],[],[method(void(),\"\",[],[],block([return(qualifiedName(simpleName(\"\"),simpleName(\"\")))])),method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,simpleName(\"\"),\"\",[]),return(number(\"0\"))),declarationStatement(variables(void(),[variable(\"\",0,newObject(void(),[methodCall(false,simpleName(\"\"),\"\",[])]))])),return(qualifiedName(simpleName(\"\"),simpleName(\"\")))]))])])","amountOfDuplications":4,"treeSize":68,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionYear.java","lines":[33,39,42,43,44,47,48,49,50,51,53],"code":["package smallsql.database;","final class ExpressionFunctionYear extends ExpressionFunctionReturnInt {","final int getFunction() {","return SQLTokenizer.YEAR;","}","final int getInt() throws Exception {","if(param1.isNull()) return 0;","DateTime.Details details = new DateTime.Details(param1.getLong());","return details.year;","}","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionMinute.java","lines":[33,39,42,43,44,47,48,49,50,51,53],"code":["package smallsql.database;","final class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {","final int getFunction() {","return SQLTokenizer.MINUTE;","}","final int getInt() throws Exception {","if(param1.isNull()) return 0;","DateTime.Details details = new DateTime.Details(param1.getLong());","return details.minute;","}","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionDayOfMonth.java","lines":[33,39,42,43,44,47,48,49,50,51,53],"code":["package smallsql.database;","final class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {","final int getFunction() {","return SQLTokenizer.DAYOFMONTH;","}","final int getInt() throws Exception {","if(param1.isNull()) return 0;","DateTime.Details details = new DateTime.Details(param1.getLong());","return details.day;","}","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionHour.java","lines":[33,39,42,43,44,47,48,49,50,51,53],"code":["package smallsql.database;","final class ExpressionFunctionHour extends ExpressionFunctionReturnInt {","final int getFunction() {","return SQLTokenizer.HOUR;","}","final int getInt() throws Exception {","if(param1.isNull()) return 0;","DateTime.Details details = new DateTime.Details(param1.getLong());","return details.hour;","}","}"],"amountOfLines":11}}]}},{"cloneClass":{"cloneClassName":"try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[])),expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"Exception should throw\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"HY010\\\"\"),number(\"0\"),simpleName(\"\")]))]))])","amountOfDuplications":3,"treeSize":27,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[300,301,302,303,304,305],"code":["try{","pr.executeUpdate();","fail(\"Exception should throw\");","}catch(SQLException ex){","assertSQLException(\"HY010\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[294,295,296,297,298,299],"code":["try{","pr.executeQuery();","fail(\"Exception should throw\");","}catch(SQLException ex){","assertSQLException(\"HY010\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[288,289,290,291,292,293],"code":["try{","pr.execute();","fail(\"Exception should throw\");","}catch(SQLException ex){","assertSQLException(\"HY010\", 0, ex);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"catch(parameter(void(),\"\",0),block([expressionStatement(assignment(arrayAccess(simpleName(\"\"),simpleName(\"\")),\"=\",simpleName(\"\"))),if(infix(simpleName(\"\"),\"==\",null()),block([expressionStatement(assignment(simpleName(\"\"),\"=\",newObject(void(),[methodCall(false,simpleName(\"\"),\"\",[]),methodCall(false,simpleName(\"\"),\"\",[]),methodCall(false,simpleName(\"\"),\"\",[]),simpleName(\"\")]))),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))","amountOfDuplications":2,"treeSize":65,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSPreparedStatement.java","lines":[246,247,248,249,250,251,252,253],"code":["} catch (SQLException ex) {","result[b] = EXECUTE_FAILED;","if(failed == null){","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","}","failed.setNextException(ex);","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/SSStatement.java","lines":[268,269,270,271,272,273,274,275],"code":["}catch(SQLException ex){","result[i] = EXECUTE_FAILED;","if(failed == null){","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","}","failed.setNextException(ex);","}"],"amountOfLines":8}}]}},{"cloneClass":{"cloneClassName":"try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])]))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,\"\",[simpleName(\"\"),qualifiedName(simpleName(\"\"),simpleName(\"\")),methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])]))]))])","amountOfDuplications":2,"treeSize":49,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SQLParser.java","lines":[1931,1932,1933,1934,1935,1936],"code":["try{","int maxRows = Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatException e){","throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/SQLParser.java","lines":[351,352,353,354,355,356],"code":["try{","int maxRows = Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatException e){","throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[])),expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"NO_GENERATED_KEYS\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"01000\\\"\"),number(\"0\"),simpleName(\"\")]))]))])","amountOfDuplications":2,"treeSize":27,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestStatement.java","lines":[188,189,190,191,192,193],"code":["try{","st.getGeneratedKeys();","fail(\"NO_GENERATED_KEYS\");","}catch(SQLException ex){","assertSQLException(\"01000\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestStatement.java","lines":[248,249,250,251,252,253],"code":["try{","pr.getGeneratedKeys();","fail(\"NO_GENERATED_KEYS\");","}catch(SQLException ex){","assertSQLException(\"01000\", 0, ex);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"compilationUnit(package(package(\"\"),\"\"),[],[class(\"\",[void()],[],[method(void(),\"\",[],[],block([return(qualifiedName(simpleName(\"\"),simpleName(\"\")))])),method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,simpleName(\"\"),\"\",[]),return(number(\"0\"))),declarationStatement(variables(void(),[variable(\"\",0,newObject(void(),[methodCall(false,simpleName(\"\"),\"\",[])]))])),return(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"+\",number(\"1\")))]))])])","amountOfDuplications":2,"treeSize":72,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionDayOfYear.java","lines":[33,39,42,43,44,47,48,49,50,51,53],"code":["package smallsql.database;","final class ExpressionFunctionDayOfYear extends ExpressionFunctionReturnInt {","final int getFunction() {","return SQLTokenizer.DAYOFYEAR;","}","final int getInt() throws Exception {","if(param1.isNull()) return 0;","DateTime.Details details = new DateTime.Details(param1.getLong());","return details.dayofyear+1;","}","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionMonth.java","lines":[33,39,42,43,44,47,48,49,50,51,53],"code":["package smallsql.database;","final class ExpressionFunctionMonth extends ExpressionFunctionReturnInt {","final int getFunction() {","return SQLTokenizer.MONTH;","}","final int getInt() throws Exception {","if(param1.isNull()) return 0;","DateTime.Details details = new DateTime.Details(param1.getLong());","return details.month+1;","}","}"],"amountOfLines":11}}]}},{"cloneClass":{"cloneClassName":"catch(parameter(void(),\"\",0),block([if(infix(simpleName(\"\"),\"!=\",null()),try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[methodCall(false,simpleName(\"\"),\"\",[])]))]))])),throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))","amountOfDuplications":2,"treeSize":43,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/TableView.java","lines":[104,105,106,107,108,109,110,111,112],"code":["}catch(Throwable e){","if(raFile != null)","try{","raFile.close();","}catch(Exception e2){","DriverManager.println(e2.toString());","}","throw SmallSQLException.createFromException(e);","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/IndexDescription.java","lines":[185,186,187,188,189,190,191,192,193],"code":["}catch(Throwable e){","if(raFile != null)","try{","raFile.close();","}catch(Exception e2){","DriverManager.println(e2.toString());","}","throw SmallSQLException.createFromException(e);","}"],"amountOfLines":9}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[simpleName(\"\")],block([try(block([return(methodCall(false,methodCall(false,\"\",[]),\"\",[]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":3,"treeSize":25,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[350,351,352,353,354,355,356],"code":["public boolean isLast() throws SQLException {","try{","return getCmd().isLast();","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[441,442,443,444,445,446,447],"code":["public int getRow() throws SQLException {","try{","return getCmd().getRow();","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[336,337,338,339,340,341,342],"code":["public boolean isAfterLast() throws SQLException {","try{","return getCmd().isAfterLast();","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"compilationUnit(package(package(\"\"),\"\"),[],[class(\"\",[void()],[],[method(void(),\"\",[],[],block([return(qualifiedName(simpleName(\"\"),simpleName(\"\")))])),method(void(),\"\",[],[simpleName(\"\")],block([return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"||\",methodCall(false,simpleName(\"\"),\"\",[])))])),method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,\"\",[]),return(number(\"0\"))),return(methodCall(false,simpleName(\"\"),\"\",[methodCall(false,simpleName(\"\"),\"\",[]),methodCall(false,simpleName(\"\"),\"\",[])]))]))])])","amountOfDuplications":2,"treeSize":66,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionATan2.java","lines":[32,35,37,39,40,41,43,44,45,46,47],"code":["package smallsql.database;","final class ExpressionFunctionATan2 extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.ATAN2; }","boolean isNull() throws Exception{","return param1.isNull() || param2.isNull();","}","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.atan2( param1.getDouble(), param2.getDouble() );","}","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionPower.java","lines":[32,35,37,39,40,41,43,44,45,46,47],"code":["package smallsql.database;","final class ExpressionFunctionPower extends ExpressionFunctionReturnFloat {","final int getFunction(){ return SQLTokenizer.POWER; }","boolean isNull() throws Exception{","return param1.isNull() || param2.isNull();","}","final double getDouble() throws Exception{","if(isNull()) return 0;","return Math.pow( param1.getDouble(), param2.getDouble() );","}","}"],"amountOfLines":11}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[simpleName(\"\")],block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[]))])),try(block([expressionStatement(methodCall(false,methodCall(false,simpleName(\"\"),\"\",[]),\"\",[stringLiteral(\"\\\"Create Table Scrollable (i counter, v varchar(20))\\\"\")])),expressionStatement(methodCall(false,\"\",[number(\"0\"),stringLiteral(\"\\\"Select * from Scrollable\\\"\")])),expressionStatement(methodCall(false,methodCall(false,simpleName(\"\"),\"\",[]),\"\",[stringLiteral(\"\\\"Insert Into Scrollable(v) Values(\\'qwert\\')\\\"\")])),expressionStatement(methodCall(false,\"\",[number(\"1\"),stringLiteral(\"\\\"Select * from Scrollable\\\"\")])),expressionStatement(methodCall(false,\"\",[number(\"0\"),stringLiteral(\"\\\"Select * from Scrollable Where 1=0\\\"\")])),declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[qualifiedName(simpleName(\"\"),simpleName(\"\")),qualifiedName(simpleName(\"\"),simpleName(\"\"))]))])),expressionStatement(methodCall(false,\"\",[methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"Select * from Scrollable Where 1=0\\\"\")])])),expressionStatement(methodCall(false,\"\",[methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"Select * from Scrollable Where 1=0 Order By v\\\"\")])])),expressionStatement(methodCall(false,\"\",[methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"Select v from Scrollable Where 1=0 Group By v\\\"\")])])),expressionStatement(methodCall(false,\"\",[methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"Select v from Scrollable Where 1=0 Group By v Order By v\\\"\")])]))]),[],block([expressionStatement(methodCall(false,\"\",[simpleName(\"\"),stringLiteral(\"\\\"Scrollable\\\"\")]))]))]))","amountOfDuplications":2,"treeSize":123,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestScrollable.java","lines":[75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,92,93],"code":["public void testNextWithWhere() throws Exception{","Connection con = AllTests.getConnection();","try{","con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","assertRowCount( 0, \"Select * from Scrollable\");","con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");","assertRowCount( 1, \"Select * from Scrollable\");","assertRowCount( 0, \"Select * from Scrollable Where 1=0\");","Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );","testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );","testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );","testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );","}finally{","dropTable( con, \"Scrollable\");","}","}"],"amountOfLines":17}},{"duplication":{"filePath":"/src/smallsql/junit/TestScrollable.java","lines":[107,108,109,110,111,113,114,115,117,118,119,120,121,122,123,124,125],"code":["public void testFirstWithWhere() throws Exception{","Connection con = AllTests.getConnection();","try{","con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","assertRowCount( 0, \"Select * from Scrollable\");","con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");","assertRowCount( 1, \"Select * from Scrollable\");","assertRowCount( 0, \"Select * from Scrollable Where 1=0\");","Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );","testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );","testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );","testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );","}finally{","dropTable( con, \"Scrollable\");","}","}"],"amountOfLines":17}}]}},{"cloneClass":{"cloneClassName":"try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"Select 1\\\"\")])),expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"Exception should throw\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"HY010\\\"\"),number(\"0\"),simpleName(\"\")]))]))])","amountOfDuplications":3,"treeSize":29,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[262,263,264,265,266,267],"code":["try{","st.executeQuery(\"Select 1\");","fail(\"Exception should throw\");","}catch(SQLException ex){","assertSQLException(\"HY010\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[268,269,270,271,272,273],"code":["try{","st.executeUpdate(\"Select 1\");","fail(\"Exception should throw\");","}catch(SQLException ex){","assertSQLException(\"HY010\", 0, ex);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[256,257,258,259,260,261],"code":["try{","st.execute(\"Select 1\");","fail(\"Exception should throw\");","}catch(SQLException ex){","assertSQLException(\"HY010\", 0, ex);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"block([declarationStatement(variables(void(),[variable(\"\",0,newObject(void(),[]))])),for([declarationExpression(variables(void(),[variable(\"\",0,number(\"0\"))]))],infix(simpleName(\"\"),\"\\<\",qualifiedName(simpleName(\"\"),simpleName(\"\"))),[postfix(simpleName(\"\"),\"++\")],block([declarationStatement(variables(void(),[variable(\"\",0,arrayAccess(arrayAccess(simpleName(\"\"),simpleName(\"\")),number(\"0\")))])),if(prefix(\"!\",methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])),block([throw(newObject(void(),[infix(stringLiteral(\"\\\"Duplicate key: \\\"\"),\"+\",simpleName(\"\"))]))]),block([declarationStatement(variables(void(),[variable(\"\",0,arrayAccess(arrayAccess(simpleName(\"\"),simpleName(\"\")),number(\"1\")))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),simpleName(\"\")]))]))]))])","amountOfDuplications":2,"treeSize":110,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/Language/Language.java","lines":[291,292,294,295,297,298,299,300,301,302,303,304,305],"code":["throws IllegalArgumentException {","Set inserted = new HashSet(); // for duplicates checking","for (int i = 0; i < entries.length; i++) {","String key = entries[i][0];","if (! inserted.add(key)) {","throw new IllegalArgumentException(\"Duplicate key: \" + key);","}","else {","String value = entries[i][1];","messages.put(key, value);","}","}","}"],"amountOfLines":13}},{"duplication":{"filePath":"/src/smallsql/database/Language/Language.java","lines":[317,318,320,321,323,324,325,326,327,328,329,330,331],"code":["private final void setSqlStates() {","Set inserted = new HashSet(); // for duplicates checking","for (int i = 0; i < SQL_STATES.length; i++) {","String key = SQL_STATES[i][0];","if (! inserted.add(key)) {","throw new IllegalArgumentException(\"Duplicate key: \" + key);","}","else {","String value = SQL_STATES[i][1];","sqlStates.put(key, value);","}","}","}"],"amountOfLines":13}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[simpleName(\"\")],block([try(block([expressionStatement(methodCall(false,\"\",[])),return(methodCall(false,methodCall(false,\"\",[]),\"\",[]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":3,"treeSize":28,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[400,401,402,403,404,405,406,407],"code":["public boolean last() throws SQLException {","try{","moveToCurrentRow();","return getCmd().last();","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[390,391,392,393,394,395,396,397],"code":["public boolean next() throws SQLException {","try{","moveToCurrentRow();","return getCmd().next();","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[380,381,382,383,384,385,386,387],"code":["public boolean previous() throws SQLException {","try{","moveToCurrentRow();","return getCmd().previous();","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":8}}]}},{"cloneClass":{"cloneClassName":"constructor(\"\",[parameter(void(),\"\",0),parameter(void(),\"\",0),parameter(void(),\"\",0),parameter(void(),\"\",0)],[],block([expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\"))),expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\"))),expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\"))),expressionStatement(assignment(fieldAccess(false,this(),\"\"),\"=\",simpleName(\"\")))]))","amountOfDuplications":3,"treeSize":53,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ForeignKey.java","lines":[47,48,49,50,51,52],"code":["ForeignKey(String pkTable, IndexDescription pk, String fkTable, IndexDescription fk){","this.pkTable = pkTable;","this.fkTable = fkTable;","this.pk = pk;","this.fk = fk;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/Join.java","lines":[51,52,53,54,55,56],"code":["Join( int type, RowSource left, RowSource right, Expression condition ){","this.type = type;","this.condition = condition;","this.left = left;","this.right = right;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/StoreImpl.java","lines":[84,85,86,87,88,89],"code":["private StoreImpl( Table table, StorePage storePage, int type, long filePos ){","this.table     = table;","this.storePage    = storePage;","this.filePos   = filePos;","this.type      = type;","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0),parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,methodCall(false,\"\",[simpleName(\"\")]),\"\",[]))])),expressionStatement(assignment(simpleName(\"\"),\"=\",infix(simpleName(\"\"),\"==\",null()))),if(simpleName(\"\"),return(null())),return(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":2,"treeSize":65,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[148,149,150,151,152,153,154,155,156,157],"code":["public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {","try{","MutableNumeric obj = getValue(columnIndex).getNumeric();","wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal(scale);","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[143,144,145,146,147,148,149,150,151,152],"code":["public BigDecimal getBigDecimal(int i, int scale) throws SQLException {","try{","MutableNumeric obj = getValue(i).getNumeric();","wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal(scale);","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0),parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([if(infix(simpleName(\"\"),\"==\",null()),block([return(methodCall(false,\"\",[simpleName(\"\")]))])),declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,\"\",[simpleName(\"\")]))])),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[]))),if(simpleName(\"\"),return(null())),return(newObject(void(),[methodCall(false,simpleName(\"\"),\"\",[methodCall(false,simpleName(\"\"),\"\",[]),methodCall(false,simpleName(\"\"),\"\",[])])]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":3,"treeSize":87,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[757,758,759,760,761,762,763,764,765,766,767,768,769],"code":["public Date getDate(int columnIndex, Calendar cal) throws SQLException {","try{","if(cal == null){","return getDate(columnIndex);","}","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","if(wasNull) return null;","return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":13}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[797,798,799,800,801,802,803,804,805,806,807,808,809],"code":["public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {","try{","if(cal == null){","return getTimestamp(columnIndex);","}","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","if(wasNull) return null;","return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":13}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[777,778,779,780,781,782,783,784,785,786,787,788,789],"code":["public Time getTime(int columnIndex, Calendar cal) throws SQLException {","try{","if(cal == null){","return getTime(columnIndex);","}","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","if(wasNull) return null;","return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":13}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,\"\",[simpleName(\"\")]))])),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[]))),return(methodCall(false,simpleName(\"\"),\"\",[]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":10,"treeSize":48,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[97,98,99,100,101,102,103,104,105],"code":["public boolean getBoolean(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","return expr.getBoolean();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[139,140,141,142,143,144,145,146,147],"code":["public double getDouble(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","return expr.getDouble();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[130,131,132,133,134,135,136,137,138],"code":["public float getFloat(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","return expr.getFloat();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[112,113,114,115,116,117,118,119,120],"code":["public int getInt(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","return expr.getInt();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[116,117,118,119,120,121,122,123,124],"code":["public long getLong(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[121,122,123,124,125,126,127,128,129],"code":["public long getLong(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","return expr.getLong();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[107,108,109,110,111,112,113,114,115],"code":["public int getInt(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getInt();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[134,135,136,137,138,139,140,141,142],"code":["public double getDouble(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[92,93,94,95,96,97,98,99,100],"code":["public boolean getBoolean(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getBoolean();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[125,126,127,128,129,130,131,132,133],"code":["public float getFloat(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getFloat();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([try(block([return(infix(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]),\"!=\",number(\"0\")))]),[catch(parameter(void(),\"\",0),block([]))]),return(infix(infix(methodCall(false,stringLiteral(\"\\\"true\\\"\"),\"\",[simpleName(\"\")]),\"||\",methodCall(false,stringLiteral(\"\\\"yes\\\"\"),\"\",[simpleName(\"\")])),\"||\",methodCall(false,stringLiteral(\"\\\"t\\\"\"),\"\",[simpleName(\"\")])))]))","amountOfDuplications":2,"treeSize":49,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/Utils.java","lines":[316,317,318,319,320,321],"code":["static boolean string2boolean( String val){","try{","return Double.parseDouble( val ) != 0;","}catch(NumberFormatException e){/*ignore it if it not a number*/}","return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/BasicTestCase.java","lines":[190,191,192,193,194,195],"code":["private boolean string2boolean( String val){","try{","return Double.parseDouble( val ) != 0;","}catch(NumberFormatException e){/*ignore it if it not a number*/}","return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"if(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"\\>\",number(\"0\")),block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,methodCall(false,simpleName(\"\"),\"\",[]),\"\",[]))])),while(methodCall(false,simpleName(\"\"),\"\",[]),block([declarationStatement(variables(void(),[variable(\"\",0,cast(void(),methodCall(false,simpleName(\"\"),\"\",[])))])),if(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"!=\",simpleName(\"\")),return(null()))]))]))","amountOfDuplications":3,"treeSize":58,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/Table.java","lines":[369,370,371,372,373,374,375],"code":["if(serializeConnections.size() > 0){","Iterator values = locks.values().iterator();","while(values.hasNext()){","TableStorePage lock = (TableStorePage)values.next();","if(lock.con != con) return null;","}","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/Table.java","lines":[387,388,389,390,391,392,393],"code":["if(serializeConnections.size() > 0){","Iterator values = locks.values().iterator();","while(values.hasNext()){","TableStorePage lock = (TableStorePage)values.next();","if(lock.con != con) return null;","}","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/Table.java","lines":[357,358,359,360,361,362,363],"code":["if(locks.size() > 0){","Iterator values = locks.values().iterator();","while(values.hasNext()){","TableStorePage lock = (TableStorePage)values.next();","if(lock.con != con) return null;","}","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[],block([try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[]))])),declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[]))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[infix(stringLiteral(\"\\\"drop table \\\"\"),\"+\",simpleName(\"\"))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[]))]),[catch(parameter(void(),\"\",0),block([]))])]))","amountOfDuplications":4,"treeSize":49,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestMoneyRounding.java","lines":[52,53,54,55,56,57,58,60,61],"code":["public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/junit/TestDataTypes.java","lines":[67,68,69,70,71,72,73,75,76],"code":["public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/junit/TestFunctions.java","lines":[373,374,375,376,377,378,379,381,382],"code":["public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/junit/TestOperatoren.java","lines":[94,95,96,97,98,99,100,102,103],"code":["public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","}","}"],"amountOfLines":9}}]}},{"cloneClass":{"cloneClassName":"block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))])),if(infix(simpleName(\"\"),\"\\>=\",number(\"0\")),return(simpleName(\"\"))),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"-\",number(\"1\")))])","amountOfDuplications":2,"treeSize":37,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/GroupResult.java","lines":[88,89,90,91,92,93],"code":["}else{","int idx = internalExpressions.indexOf(expr);","if(idx >= 0) return idx;","internalExpressions.add(expr);","return internalExpressions.size()-1;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/GroupResult.java","lines":[110,111,112,113,114,115],"code":["if(type >= Expression.GROUP_BEGIN){","int idx = internalExpressions.indexOf(expr);","if(idx >= 0) return idx;","internalExpressions.add(expr);","return internalExpressions.size()-1;","}else{"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([declarationStatement(variables(void(),[variable(\"\",0,newObject(void(),[infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"\\<\\<\",number(\"1\"))]))])),for([declarationExpression(variables(void(),[variable(\"\",0,number(\"0\"))]))],infix(simpleName(\"\"),\"\\<\",qualifiedName(simpleName(\"\"),simpleName(\"\"))),[postfix(simpleName(\"\"),\"++\")],block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[arrayAccess(simpleName(\"\"),infix(bracket(infix(arrayAccess(simpleName(\"\"),simpleName(\"\")),\"\\>\\>\",number(\"4\"))),\"&\",number(\"0x0F\")))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[arrayAccess(simpleName(\"\"),infix(bracket(arrayAccess(simpleName(\"\"),simpleName(\"\"))),\"&\",number(\"0x0F\")))]))])),return(methodCall(false,simpleName(\"\"),\"\",[]))]))","amountOfDuplications":2,"treeSize":112,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/BasicTestCase.java","lines":[101,102,103,104,105,106,107,108],"code":["private static String bytes2hex( byte[] bytes ){","StringBuffer buf = new StringBuffer(bytes.length << 1);","for(int i=0; i<bytes.length; i++){","buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );","buf.append( digits[ (bytes[i]     ) & 0x0F ] );","}","return buf.toString();","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/Utils.java","lines":[204,205,206,207,208,209,210,211],"code":["static String bytes2hex( byte[] bytes ){","StringBuffer buf = new StringBuffer(bytes.length << 1);","for(int i=0; i<bytes.length; i++){","buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );","buf.append( digits[ (bytes[i]     ) & 0x0F ] );","}","return buf.toString();","}"],"amountOfLines":8}}]}},{"cloneClass":{"cloneClassName":"if(infix(simpleName(\"\"),\"\\>\",number(\"0\")),block([for([declarationExpression(variables(void(),[variable(\"\",0,number(\"0\"))]))],infix(simpleName(\"\"),\"\\<\",simpleName(\"\")),[postfix(simpleName(\"\"),\"++\")],block([expressionStatement(assignment(simpleName(\"\"),\"*=\",number(\"10\")))])),expressionStatement(assignment(simpleName(\"\"),\"*=\",simpleName(\"\")))]),block([for([declarationExpression(variables(void(),[variable(\"\",0,number(\"0\"))]))],infix(simpleName(\"\"),\"\\>\",simpleName(\"\")),[postfix(simpleName(\"\"),\"--\")],block([expressionStatement(assignment(simpleName(\"\"),\"*=\",number(\"10\")))])),expressionStatement(assignment(simpleName(\"\"),\"/=\",simpleName(\"\")))]))","amountOfDuplications":2,"treeSize":76,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionTruncate.java","lines":[49,50,51,52,53,54,55,56,57,58,59],"code":["if(places > 0){","for(int i=0; i<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i>places; i--){","factor *= 10;","}","value /= factor;","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionRound.java","lines":[49,50,51,52,53,54,55,56,57,58,59],"code":["if(places > 0){","for(int i=0; i<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i>places; i--){","factor *= 10;","}","value /= factor;","}"],"amountOfLines":11}}]}},{"cloneClass":{"cloneClassName":"try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[])),expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"SQLException \\'ResultSet is forward only\\' should be throw\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"01000\\\"\"),number(\"0\"),simpleName(\"\")]))]))])","amountOfDuplications":8,"treeSize":27,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[81,82,83,84,85,86],"code":["try{","rs.last();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[60,61,62,63,64,65],"code":["try{","rs.isFirst();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[95,96,97,98,99,100],"code":["try{","rs.isAfterLast();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[67,68,69,70,71,72],"code":["try{","rs.first();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[74,75,76,77,78,79],"code":["try{","rs.previous();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[53,54,55,56,57,58],"code":["try{","rs.isBeforeFirst();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[88,89,90,91,92,93],"code":["try{","rs.isLast();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[102,103,104,105,106,107],"code":["try{","rs.afterLast();","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"switch(simpleName(\"\"),[case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"+\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"-\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"*\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"/\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(prefix(\"-\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"%\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(prefix(\"~\",methodCall(false,simpleName(\"\"),\"\",[])))])","amountOfDuplications":2,"treeSize":92,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[205,206,207,208,209,210,211,212,213],"code":["switch(operation){","case ADD:       return left.getInt() + right.getInt();","case SUB:       return left.getInt() - right.getInt();","case MUL:       return left.getInt() * right.getInt();","case DIV:       return left.getInt() / right.getInt();","case NEGATIVE:  return               - left.getInt();","case MOD:\t\treturn left.getInt() % right.getInt();","case BIT_NOT:   return               ~ left.getInt();","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[247,248,249,250,251,252,253,254,255],"code":["switch(operation){","case ADD: return left.getLong() + right.getLong();","case SUB: return left.getLong() - right.getLong();","case MUL: return left.getLong() * right.getLong();","case DIV: return left.getLong() / right.getLong();","case NEGATIVE:  return          - left.getLong();","case MOD:\t\treturn left.getLong() % right.getLong();","case BIT_NOT:   return          ~ right.getInt();","}"],"amountOfLines":9}}]}},{"cloneClass":{"cloneClassName":"switch(simpleName(\"\"),[case(simpleName(\"\")),case(simpleName(\"\")),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"==\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"\\>\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"\\>=\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"\\<\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"\\<=\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),return(infix(methodCall(false,simpleName(\"\"),\"\",[]),\"!=\",methodCall(false,simpleName(\"\"),\"\",[]))),case(simpleName(\"\")),declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[]))])),return(infix(infix(simpleName(\"\"),\"\\>=\",methodCall(false,simpleName(\"\"),\"\",[])),\"&&\",infix(methodCall(false,simpleName(\"\"),\"\",[]),\"\\>=\",simpleName(\"\")))),defaultCase(),return(infix(methodCall(false,\"\",[]),\"!=\",number(\"0\")))])","amountOfDuplications":5,"treeSize":131,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[585,586,587,588,589,590,591,592,593,594,595,596,597,598,599],"code":["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return left.getLong() == right.getLong();","case GREATER:   return left.getLong() >  right.getLong();","case GRE_EQU:   return left.getLong() >= right.getLong();","case LESSER:    return left.getLong() <  right.getLong();","case LES_EQU:   return left.getLong() <= right.getLong();","case UNEQUALS:  return left.getLong() != right.getLong();","case BETWEEN:","long _left = left.getLong();","return _left >= right.getLong() && right2.getLong() >= _left;","default:","return getLong() != 0;","}"],"amountOfLines":15}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[635,636,637,638,639,640,641,642,643,644,645,646,647,648,649],"code":["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return left.getMoney() == right.getMoney();","case GREATER:   return left.getMoney() >  right.getMoney();","case GRE_EQU:   return left.getMoney() >= right.getMoney();","case LESSER:    return left.getMoney() <  right.getMoney();","case LES_EQU:   return left.getMoney() <= right.getMoney();","case UNEQUALS:  return left.getMoney() != right.getMoney();","case BETWEEN:","long _left = left.getMoney();","return _left >= right.getMoney() && right2.getMoney() >= _left;","default:","return getMoney() != 0;","}"],"amountOfLines":15}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[618,619,620,621,622,623,624,625,626,627,628,629,630,631,632],"code":["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return left.getDouble() == right.getDouble();","case GREATER:   return left.getDouble() >  right.getDouble();","case GRE_EQU:   return left.getDouble() >= right.getDouble();","case LESSER:    return left.getDouble() <  right.getDouble();","case LES_EQU:   return left.getDouble() <= right.getDouble();","case UNEQUALS:  return left.getDouble() != right.getDouble();","case BETWEEN:","double _left = left.getDouble();","return _left >= right.getDouble() && right2.getDouble() >= _left;","default:","return getDouble() != 0;","}"],"amountOfLines":15}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[601,602,603,604,605,606,607,608,609,610,611,612,613,614,615],"code":["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return left.getFloat() == right.getFloat();","case GREATER:   return left.getFloat() >  right.getFloat();","case GRE_EQU:   return left.getFloat() >= right.getFloat();","case LESSER:    return left.getFloat() <  right.getFloat();","case LES_EQU:   return left.getFloat() <= right.getFloat();","case UNEQUALS:  return left.getFloat() != right.getFloat();","case BETWEEN:","float _left = left.getFloat();","return _left >= right.getFloat() && right2.getFloat() >= _left;","default:","return getFloat() != 0;","}"],"amountOfLines":15}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[565,566,567,568,569,570,571,572,573,574,575,576,577,578,579],"code":["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return left.getInt() == right.getInt();","case GREATER:   return left.getInt() >  right.getInt();","case GRE_EQU:   return left.getInt() >= right.getInt();","case LESSER:    return left.getInt() <  right.getInt();","case LES_EQU:   return left.getInt() <= right.getInt();","case UNEQUALS:  return left.getInt() != right.getInt();","case BETWEEN:","int _left = left.getInt();","return _left >= right.getInt() && right2.getInt() >= _left;","default:","return getInt() != 0;","}"],"amountOfLines":15}}]}},{"cloneClass":{"cloneClassName":"while(methodCall(false,simpleName(\"\"),\"\",[]),block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"v\\\"\")]))])),expressionStatement(methodCall(false,\"\",[infix(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]),\"\\<\",number(\"0\"))])),expressionStatement(assignment(simpleName(\"\"),\"=\",simpleName(\"\"))),expressionStatement(postfix(simpleName(\"\"),\"++\"))]))","amountOfDuplications":2,"treeSize":43,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestOrderBy.java","lines":[186,187,188,189,190,191],"code":["while(rs.next()){","String newValue = rs.getString(\"v\");","assertTrue( oldValue.compareTo( newValue ) < 0 );","oldValue = newValue;","count++;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestOrderBy.java","lines":[810,811,812,813,814,815],"code":["while(rs.next()){","String newValue = rs.getString(\"v\");","assertTrue( oldValue.compareTo( newValue ) < 0 );","oldValue = newValue;","count++;","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"if(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"!=\",null()),block([if(instanceof(qualifiedName(simpleName(\"\"),simpleName(\"\")),void()),block([expressionStatement(postfix(simpleName(\"\"),\"++\")),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[newObject(void(),[cast(void(),qualifiedName(simpleName(\"\"),simpleName(\"\"))),bracket(infix(methodCall(false,methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]),\"\",[]),\"!=\",qualifiedName(simpleName(\"\"),simpleName(\"\")))),simpleName(\"\"),simpleName(\"\")])])),continue()]),return(methodCall(false,\"\",[qualifiedName(simpleName(\"\"),simpleName(\"\"))])))]))","amountOfDuplications":2,"treeSize":82,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/IndexScrollStatus.java","lines":[119,120,121,122,123,124,125,126,127,128,129],"code":["if(status.nodeValue != null){","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}"],"amountOfLines":11}},{"duplication":{"filePath":"/src/smallsql/database/IndexScrollStatus.java","lines":[88,89,90,91,92,93,94,95,96,97,98],"code":["if(status.nodeValue != null){","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}"],"amountOfLines":11}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([declarationStatement(variables(void(),[variable(\"\",0,newArray(void(),[simpleName(\"\")]))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),simpleName(\"\"),simpleName(\"\"),number(\"0\"),simpleName(\"\")])),expressionStatement(assignment(simpleName(\"\"),\"+=\",simpleName(\"\"))),return(simpleName(\"\"))]))","amountOfDuplications":2,"treeSize":47,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/MemoryStream.java","lines":[156,157,158,159,160,161],"code":["byte[] readBytes(int length){","byte[] bytes = new byte[length];","System.arraycopy(puffer, offset, bytes, 0, length);","offset += length;","return bytes;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/StoreImpl.java","lines":[522,523,524,525,526,527],"code":["byte[] readBytes(int length){","byte[] daten = new byte[length];","System.arraycopy( page, offset, daten, 0, length);","offset += length;","return daten;","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"block([if(infix(simpleName(\"\"),\"\\>=\",simpleName(\"\")),block([return(booleanLiteral(false))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[]))])","amountOfDuplications":2,"treeSize":16,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/JoinScroll.java","lines":[163,164,165,166,167,168],"code":["while(isFullNotValid[fullReturnCounter++]){","if(fullReturnCounter >= fullRowCount){","return false;","}","right.next();","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/JoinScroll.java","lines":[82,83,84,85,86,87],"code":["do{","if(fullReturnCounter >= fullRowCount){","return false;","}","right.next();","}while(isFullNotValid[fullReturnCounter++]);"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([if(infix(simpleName(\"\"),\"\\>=\",qualifiedName(simpleName(\"\"),simpleName(\"\"))),block([expressionStatement(methodCall(false,\"\",[infix(simpleName(\"\"),\"\\<\\<\",number(\"1\"))]))])),expressionStatement(assignment(arrayAccess(simpleName(\"\"),postfix(simpleName(\"\"),\"++\")),\"=\",simpleName(\"\")))]))","amountOfDuplications":4,"treeSize":43,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ForeignKeys.java","lines":[62,63,64,65,66,67],"code":["final void add(ForeignKey foreignKey){","if(size >= data.length ){","resize(size << 1);","}","data[size++] = foreignKey;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/LongList.java","lines":[66,67,68,69,70,71],"code":["final void add(long value){","if(size >= data.length ){","resize(size << 1);","}","data[ size++ ] = value;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/Expressions.java","lines":[70,71,72,73,74,75],"code":["final void add(Expression expr){","if(size >= data.length ){","resize(size << 1);","}","data[size++] = expr;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/Strings.java","lines":[62,63,64,65,66,67],"code":["final void add(String descr){","if(size >= data.length ){","resize(size << 1);","}","data[size++] = descr;","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"try(block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[number(\"1\")])),expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"SQLException \\'ResultSet is forward only\\' should be throw\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,\"\",[stringLiteral(\"\\\"01000\\\"\"),number(\"0\"),simpleName(\"\")]))]))])","amountOfDuplications":2,"treeSize":29,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[116,117,118,119,120,121],"code":["try{","rs.relative(1);","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestExceptionMethods.java","lines":[109,110,111,112,113,114],"code":["try{","rs.absolute(1);","fail(\"SQLException 'ResultSet is forward only' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[],block([try(block([expressionStatement(methodCall(false,\"\",[methodCall(false,simpleName(\"\"),\"\",[]),simpleName(\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[]))]))])]))","amountOfDuplications":2,"treeSize":25,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestAlterTable.java","lines":[38,39,40,41,42,43,44],"code":["public void tearDown(){","try {","dropTable( AllTests.getConnection(), table );","} catch (SQLException ex) {","ex.printStackTrace();","}","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/junit/TestAlterTable2.java","lines":[19,20,21,22,23,24,25],"code":["public void tearDown(){","try {","dropTable( AllTests.getConnection(), table );","} catch (SQLException ex) {","ex.printStackTrace();","}","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"compilationUnit(package(package(\"\"),\"\"),[],[class(\"\",[void()],[],[method(void(),\"\",[],[],block([return(qualifiedName(simpleName(\"\"),simpleName(\"\")))])),method(void(),\"\",[],[simpleName(\"\")],block([return(methodCall(false,simpleName(\"\"),\"\",[]))])),method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,\"\",[]),return(null())),return(methodCall(false,methodCall(false,\"\",[]),\"\",[]))])),method(void(),\"\",[],[simpleName(\"\")],block([if(methodCall(false,\"\",[]),return(null())),return(methodCall(false,methodCall(false,simpleName(\"\"),\"\",[]),\"\",[]))]))])])","amountOfDuplications":2,"treeSize":79,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionUCase.java","lines":[33,39,41,42,43,46,47,48,51,52,53,54,57,58,59,60,61],"code":["package smallsql.database;","public class ExpressionFunctionUCase extends ExpressionFunctionReturnP1StringAndBinary {","final int getFunction() {","return SQLTokenizer.UCASE;","}","final boolean isNull() throws Exception {","return param1.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;","return getString().getBytes();","}","final String getString() throws Exception {","if(isNull()) return null;","return param1.getString().toUpperCase();","}","}"],"amountOfLines":17}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionLCase.java","lines":[33,39,41,42,43,46,47,48,51,52,53,54,57,58,59,60,61],"code":["package smallsql.database;","public class ExpressionFunctionLCase extends ExpressionFunctionReturnP1StringAndBinary {","final int getFunction() {","return SQLTokenizer.LCASE;","}","final boolean isNull() throws Exception {","return param1.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;","return getString().getBytes();","}","final String getString() throws Exception {","if(isNull()) return null;","return param1.getString().toLowerCase();","}","}"],"amountOfLines":17}}]}},{"cloneClass":{"cloneClassName":"block([if(methodCall(false,simpleName(\"\"),\"\",[]),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[]))),expressionStatement(methodCall(false,\"\",[simpleName(\"\")])))])","amountOfDuplications":2,"treeSize":19,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionValue.java","lines":[153,154,155,156,157,158],"code":["if(value == null){","if(expr.isNull())","dataType = expr.getDataType();","else","initValue( expr );","}else if(!expr.isNull()){"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionValue.java","lines":[210,211,212,213,214,215],"code":["if(value == null){","if(expr.isNull())","dataType = expr.getDataType();","else","initValue( expr );","}else if(!expr.isNull()){"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([declarationStatement(variables(void(),[variable(\"\",0,arrayInitializer([methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]),methodCall(false,simpleName(\"\"),\"\",[methodCall(false,\"\",[])])]))])),return(methodCall(false,simpleName(\"\"),\"\",[qualifiedName(simpleName(\"\"),simpleName(\"\")),simpleName(\"\")]))]))","amountOfDuplications":2,"treeSize":45,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunction.java","lines":[104,105,106,107,108,109,110],"code":["SQLException createUnspportedDataType( int dataType ){","Object[] params = {","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};","return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC, params);","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunction.java","lines":[116,117,118,119,120,121,122],"code":["SQLException createUnspportedConversion( int dataType ){","Object[] params = {","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};","return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC, params);","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([expressionStatement(methodCall(false,\"\",[])),return(methodCall(false,methodCall(false,\"\",[]),\"\",[simpleName(\"\")]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":2,"treeSize":33,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[421,422,423,424,425,426,427,428],"code":["public boolean absolute(int row) throws SQLException {","try{","moveToCurrentRow();","return getCmd().absolute(row);","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[431,432,433,434,435,436,437,438],"code":["public boolean relative(int rows) throws SQLException {","try{","moveToCurrentRow();","return getCmd().relative(rows);","}catch(Exception e){","throw SmallSQLException.createFromException(e);","}","}"],"amountOfLines":8}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([if(prefix(\"!\",methodCall(true,\"\",[simpleName(\"\")])),return(booleanLiteral(false))),if(prefix(\"!\",bracket(instanceof(simpleName(\"\"),void()))),return(booleanLiteral(false))),if(infix(fieldAccess(false,bracket(cast(void(),simpleName(\"\"))),\"\"),\"!=\",simpleName(\"\")),return(booleanLiteral(false))),return(booleanLiteral(true))]))","amountOfDuplications":2,"treeSize":54,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionName.java","lines":[66,67,68,69,70,71],"code":["public boolean equals(Object expr){","if(!super.equals(expr)) return false;","if(!(expr instanceof ExpressionName)) return false;","if( ((ExpressionName)expr).fromEntry != fromEntry) return false;","return true;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionArithmetic.java","lines":[165,166,167,168,169,170],"code":["public boolean equals(Object expr){","if(!super.equals(expr)) return false;","if(!(expr instanceof ExpressionArithmetic)) return false;","if( ((ExpressionArithmetic)expr).operation != operation) return false;","return true;","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"class(\"\",[],[],[field(void(),[variable(\"\",0)]),field(void(),[variable(\"\",0)]),field(void(),[variable(\"\",0)]),field(void(),[variable(\"\",0)])])","amountOfDuplications":2,"treeSize":20,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestExceptions.java","lines":[132,133,134,135,136,137],"code":["private static class TestValue{","String sql;","String sqlstate;","int errorCode;","int errorType;","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/SQLTokenizer.java","lines":[939,940,941,942,943,944],"code":["class SearchNode{","int value;","char letter;","SearchNode nextLetter; // next character of a keyword","SearchNode nextEntry;  // next Entry of a character that has the same start sequence","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"block([expressionStatement(assignment(simpleName(\"\"),\"*=\",number(\"10\"))),if(infix(simpleName(\"\"),\"==\",number(\"1000000000\")),block([expressionStatement(methodCall(false,\"\",[simpleName(\"\")])),expressionStatement(assignment(simpleName(\"\"),\"=\",number(\"1\")))]))])","amountOfDuplications":2,"treeSize":27,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/MutableNumeric.java","lines":[362,363,364,365,366,367,368],"code":["for(;newScale>scale; scale++){","factor *=10;","if(factor == 1000000000){","mul(factor);","factor = 1;","}","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/MutableNumeric.java","lines":[371,372,373,374,375,376,377],"code":["for(;newScale<scale; scale--){","factor *=10;","if(factor == 1000000000){","divImpl(factor);","factor = 1;","}","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[],block([if(infix(simpleName(\"\"),\"\\>\",qualifiedName(simpleName(\"\"),simpleName(\"\"))),return(qualifiedName(simpleName(\"\"),simpleName(\"\")))),if(infix(simpleName(\"\"),\"\\<\",qualifiedName(simpleName(\"\"),simpleName(\"\"))),return(qualifiedName(simpleName(\"\"),simpleName(\"\")))),return(cast(void(),simpleName(\"\")))]))","amountOfDuplications":2,"treeSize":47,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/Utils.java","lines":[132,133,134,135,136,137,138],"code":["static long double2long(double value){","if(value > Long.MAX_VALUE)","return Long.MAX_VALUE;","if(value < Long.MIN_VALUE)","return Long.MIN_VALUE;","return (long)value;","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/Utils.java","lines":[124,125,126,127,128,129,130],"code":["static int long2int(long value){","if(value > Integer.MAX_VALUE)","return Integer.MAX_VALUE;","if(value < Integer.MIN_VALUE)","return Integer.MIN_VALUE;","return (int)value;","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[],block([if(infix(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"==\",number(\"0\")),\"||\",infix(simpleName(\"\"),\"==\",number(\"0\"))),block([return(number(\"0\"))]),block([if(infix(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"==\",number(\"1\")),\"&&\",bracket(infix(arrayAccess(simpleName(\"\"),number(\"0\")),\"\\>\",number(\"0\")))),block([return(infix(infix(arrayAccess(simpleName(\"\"),number(\"0\")),\"/\",arrayAccess(simpleName(\"\"),simpleName(\"\"))),\"*\",simpleName(\"\")))]),if(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"==\",number(\"1\")),block([declarationStatement(variables(void(),[variable(\"\",0,infix(arrayAccess(simpleName(\"\"),number(\"0\")),\"&\",number(\"0xFFFFFFFFL\")))])),return(infix(infix(simpleName(\"\"),\"/\",arrayAccess(simpleName(\"\"),simpleName(\"\"))),\"*\",simpleName(\"\")))]),if(infix(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"==\",number(\"2\")),\"&&\",bracket(infix(arrayAccess(simpleName(\"\"),number(\"0\")),\"\\>\",number(\"0\")))),block([declarationStatement(variables(void(),[variable(\"\",0,infix(bracket(infix(bracket(cast(void(),arrayAccess(simpleName(\"\"),number(\"0\")))),\"\\<\\<\",number(\"32\"))),\"|\",bracket(infix(arrayAccess(simpleName(\"\"),number(\"1\")),\"&\",number(\"0xFFFFFFFFL\")))))])),return(infix(infix(simpleName(\"\"),\"/\",arrayAccess(simpleName(\"\"),simpleName(\"\"))),\"*\",simpleName(\"\")))]),block([return(methodCall(false,newObject(void(),[newObject(void(),[methodCall(false,\"\",[])]),simpleName(\"\")]),\"\",[]))]))))]))]))","amountOfDuplications":2,"treeSize":222,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/MutableNumeric.java","lines":[511,512,513,514,515,517,518,519,521,522,523,524,526,527,528,529,530,531,532],"code":["public double doubleValue(){","if(value.length == 0 || signum == 0){","return 0;","}else{","if (value.length == 1 && (value[0] > 0)){","return value[0] / scaleDoubleFactor[scale] * signum;","}else","if (value.length == 1){","long temp = value[0] & 0xFFFFFFFFL;","return temp / scaleDoubleFactor[scale] * signum;","}else","if (value.length == 2 && (value[0] > 0)){","long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);","return temp / scaleDoubleFactor[scale] * signum;","}else{","return new BigDecimal( new BigInteger( toByteArray() ), scale ).doubleValue();","}","}","}"],"amountOfLines":19}},{"duplication":{"filePath":"/src/smallsql/database/MutableNumeric.java","lines":[488,489,490,491,492,494,495,496,498,499,500,501,503,504,505,506,507,508,509],"code":["public float floatValue(){","if(value.length == 0 || signum == 0){","return 0;","}else{","if (value.length == 1 && (value[0] > 0)){","return value[0] / scaleFloatFactor[scale] * signum;","}else","if (value.length == 1){","long temp = value[0] & 0xFFFFFFFFL;","return temp / scaleFloatFactor[scale] * signum;","}else","if (value.length == 2 && (value[0] > 0)){","long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);","return temp / scaleFloatFactor[scale] * signum;","}else{","return new BigDecimal( new BigInteger( toByteArray() ), scale ).floatValue();","}","}","}"],"amountOfLines":19}}]}},{"cloneClass":{"cloneClassName":"if(infix(simpleName(\"\"),\"&&\",infix(simpleName(\"\"),\"!=\",null())),block([if(instanceof(simpleName(\"\"),void()),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,bracket(cast(void(),simpleName(\"\"))),\"\",[])))),if(instanceof(simpleName(\"\"),void()),block([declarationStatement(variables(void(),[variable(\"\",0,cast(void(),simpleName(\"\")))])),declarationStatement(variables(void(),[variable(\"\",0,infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"-\",number(\"1\")))])),for([],infix(simpleName(\"\"),\"\\>=\",number(\"0\")),[postfix(simpleName(\"\"),\"--\")],if(infix(arrayAccess(simpleName(\"\"),simpleName(\"\")),\"!=\",number(\"0\")),break(\"\"))),expressionStatement(postfix(simpleName(\"\"),\"++\")),declarationStatement(variables(void(),[variable(\"\",0,newArray(void(),[simpleName(\"\")]))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),number(\"0\"),simpleName(\"\"),number(\"0\"),simpleName(\"\")])),expressionStatement(assignment(simpleName(\"\"),\"=\",simpleName(\"\")))]))]))","amountOfDuplications":2,"treeSize":140,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/BasicTestCase.java","lines":[137,139,140,141,142,143,144,145,146,147,148,149],"code":["if(needTrim && obj2 != null){","if(obj2 instanceof String) obj2 = ((String)obj2).trim();","if(obj2 instanceof byte[]){","byte[] tmp = (byte[])obj2;","int k=tmp.length-1;","for(; k>= 0; k--) if(tmp[k] != 0) break;","k++;","byte[] tmp2 = new byte[k];","System.arraycopy( tmp, 0, tmp2, 0, k);","obj2 = tmp2;","}","}"],"amountOfLines":12}},{"duplication":{"filePath":"/src/smallsql/junit/BasicTestCase.java","lines":[124,126,127,128,129,130,131,132,133,134,135,136],"code":["if(needTrim && obj1 != null){","if(obj1 instanceof String) obj1 = ((String)obj1).trim();","if(obj1 instanceof byte[]){","byte[] tmp = (byte[])obj1;","int k=tmp.length-1;","for(; k>= 0; k--) if(tmp[k] != 0) break;","k++;","byte[] tmp2 = new byte[k];","System.arraycopy( tmp, 0, tmp2, 0, k);","obj1 = tmp2;","}","}"],"amountOfLines":12}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[],[],block([declarationStatement(variables(void(),[variable(\"\",0,number(\"0\"))])),for([declarationExpression(variables(void(),[variable(\"\",0,infix(methodCall(false,simpleName(\"\"),\"\",[]),\"-\",number(\"1\")))]))],infix(simpleName(\"\"),\"\\>=\",number(\"0\")),[postfix(simpleName(\"\"),\"--\")],block([expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),methodCall(false,methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]),\"\",[])])))])),return(simpleName(\"\"))]))","amountOfDuplications":2,"treeSize":57,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionCase.java","lines":[193,194,195,196,197,198,199],"code":["final int getScale(){","int precision = 0;","for(int i=results.size()-1; i>=0; i--){","precision = Math.max(precision, results.get(i).getScale());","}","return precision;","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/ExpressionFunctionCase.java","lines":[184,185,186,187,188,189,190],"code":["final int getPrecision(){","int precision = 0;","for(int i=results.size()-1; i>=0; i--){","precision = Math.max(precision, results.get(i).getPrecision());","}","return precision;","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,methodCall(false,\"\",[simpleName(\"\")]),\"\",[]))])),expressionStatement(assignment(simpleName(\"\"),\"=\",infix(simpleName(\"\"),\"==\",null()))),if(simpleName(\"\"),return(null())),return(methodCall(false,simpleName(\"\"),\"\",[]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":2,"treeSize":60,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[201,202,203,204,205,206,207,208,209,210],"code":["public BigDecimal getBigDecimal(int i) throws SQLException {","try{","MutableNumeric obj = getValue(i).getNumeric();","wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[318,319,320,321,322,323,324,325,326,327],"code":["public BigDecimal getBigDecimal(int columnIndex) throws SQLException {","try{","MutableNumeric obj = getValue(columnIndex).getNumeric();","wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,methodCall(false,\"\",[simpleName(\"\")]),\"\",[]))])),expressionStatement(assignment(simpleName(\"\"),\"=\",infix(simpleName(\"\"),\"==\",null()))),return(simpleName(\"\"))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":5,"treeSize":53,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[288,289,290,291,292,293,294,295,296],"code":["public Object getObject(int columnIndex) throws SQLException {","try{","Object obj = getValue(columnIndex).getApiObject();","wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[153,154,155,156,157,158,159,160,161],"code":["public byte[] getBytes(int i) throws SQLException {","try{","byte[] obj = getValue(i).getBytes();","wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[83,84,85,86,87,88,89,90,91],"code":["public String getString(int i) throws SQLException {","try{","String obj = getValue(i).getString();","wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[192,193,194,195,196,197,198,199,200],"code":["public Object getObject(int i) throws SQLException {","try{","Object obj = getValue(i).getObject();","wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[158,159,160,161,162,163,164,165,166],"code":["public byte[] getBytes(int columnIndex) throws SQLException {","try{","byte[] obj = getValue(columnIndex).getBytes();","wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":9}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0),parameter(void(),\"\",0),parameter(void(),\"\",0)],[],block([declarationStatement(variables(void(),[variable(\"\",0,newObject(void(),[]))])),expressionStatement(assignment(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"=\",simpleName(\"\"))),expressionStatement(assignment(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"=\",simpleName(\"\"))),expressionStatement(assignment(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"=\",simpleName(\"\"))),return(simpleName(\"\"))]))","amountOfDuplications":2,"treeSize":67,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestOperatoren.java","lines":[266,267,268,269,270,271,272],"code":["private static TestValue a(String dataType, Object small, Object large){","TestValue value = new TestValue();","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/junit/TestJoins.java","lines":[203,204,205,206,207,208,209],"code":["private static TestValue a(String dataType, Object small, Object large){","TestValue value = new TestValue();","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[simpleName(\"\")],block([try(block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,\"\",[simpleName(\"\")]))])),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[]))),if(simpleName(\"\"),return(null())),return(methodCall(false,simpleName(\"\"),\"\",[methodCall(false,simpleName(\"\"),\"\",[])]))]),[catch(parameter(void(),\"\",0),block([throw(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))])]))","amountOfDuplications":6,"treeSize":60,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[167,168,169,170,171,172,173,174,175,176],"code":["public Date getDate(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getDate( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[182,183,184,185,186,187,188,189,190,191],"code":["public Timestamp getTimestamp(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTimestamp( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[189,190,191,192,193,194,195,196,197,198],"code":["public Timestamp getTimestamp(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTimestamp( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSResultSet.java","lines":[179,180,181,182,183,184,185,186,187,188],"code":["public Time getTime(int columnIndex) throws SQLException {","try{","Expression expr = getValue(columnIndex);","wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTime( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[162,163,164,165,166,167,168,169,170,171],"code":["public Date getDate(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getDate( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}},{"duplication":{"filePath":"/src/smallsql/database/SSCallableStatement.java","lines":[172,173,174,175,176,177,178,179,180,181],"code":["public Time getTime(int i) throws SQLException {","try{","Expression expr = getValue(i);","wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTime( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],"amountOfLines":10}}]}},{"cloneClass":{"cloneClassName":"if(methodCall(false,simpleName(\"\"),\"\",[]),block([if(simpleName(\"\"),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),simpleName(\"\"),simpleName(\"\")])),return(null())])),return(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),simpleName(\"\")]))]),if(methodCall(false,\"\",[methodCall(false,simpleName(\"\"),\"\",[]),simpleName(\"\"),simpleName(\"\")]),block([if(simpleName(\"\"),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])),return(null())])),return(methodCall(false,simpleName(\"\"),\"\",[]))])))","amountOfDuplications":2,"treeSize":66,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/Index.java","lines":[358,359,360,361,362,363,364,365,366,367,368,369,370,371],"code":["if(node.isEmpty()){","if(isLastValue){","node.addRemainderKey( rowOffset, key, i );","return null;","}","return node.addRootValue( key, i);","}else","if(equals(node.getRemainderValue(), key, i)){","if(isLastValue){","node.saveValue( rowOffset);","return null;","}","return node.addRoot();","}"],"amountOfLines":14}},{"duplication":{"filePath":"/src/smallsql/database/Index.java","lines":[417,418,419,420,421,422,423,424,425,426,427,428,429,430],"code":["if(node.isEmpty()){","if(isLast){","node.addRemainderKey( rowOffset, key, i );","return null;","}","return node.addRootValue( key, i );","}else","if(equals(node.getRemainderValue(), key, i)){","if(isLast){","node.saveValue(rowOffset);","return null;","}","return node.addRoot();","}"],"amountOfLines":14}}]}},{"cloneClass":{"cloneClassName":"if(infix(simpleName(\"\"),\"==\",number(\"0\")),block([expressionStatement(methodCall(false,\"\",[simpleName(\"\")])),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[infix(stringLiteral(\"\\\"SELECT count(*) FROM \\\"\"),\"+\",simpleName(\"\"))]))),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[])),expressionStatement(assignment(simpleName(\"\"),\"=\",methodCall(false,simpleName(\"\"),\"\",[number(\"1\")])))]))","amountOfDuplications":2,"treeSize":43,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/BenchTest.java","lines":[322,323,324,325,326,327],"code":["if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/BenchTest.java","lines":[208,209,210,211,212,213],"code":["if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"block([try(block([expressionStatement(methodCall(false,methodCall(false,simpleName(\"\"),\"\",[]),\"\",[stringLiteral(\"\\\"Drop Table transactions\\\"\")]))]),[catch(parameter(void(),\"\",0),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[]))]))]),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[booleanLiteral(true)]))])","amountOfDuplications":6,"treeSize":30,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestTransactions.java","lines":[156,157,158,159,160,161],"code":["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestTransactions.java","lines":[128,129,130,131,132,133],"code":["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestTransactions.java","lines":[280,281,282,283,284,285],"code":["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestTransactions.java","lines":[364,365,366,367,368,369],"code":["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestTransactions.java","lines":[97,98,99,100,101,102],"code":["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/junit/TestTransactions.java","lines":[187,188,189,190,191,192],"code":["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"method(void(),\"\",[parameter(void(),\"\",0)],[simpleName(\"\")],block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[number(\"8\")]))])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[number(\"0\")])),expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]))","amountOfDuplications":3,"treeSize":50,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/IndexDescription.java","lines":[212,213,214,215,216,217,218],"code":["private final void writeMagic(FileChannel raFile) throws Exception{","ByteBuffer buffer = ByteBuffer.allocate(8);","buffer.putInt(MAGIC_INDEX);","buffer.putInt(INDEX_VERSION);","buffer.position(0);","raFile.write(buffer);","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/View.java","lines":[136,137,138,139,140,141,142,143],"code":["@Override","void writeMagic(FileChannel raFile) throws Exception{","ByteBuffer buffer = ByteBuffer.allocate(8);","buffer.putInt(MAGIC_VIEW);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/database/Table.java","lines":[219,220,221,222,223,224,225,226],"code":["@Override","void writeMagic(FileChannel raFile) throws Exception{","ByteBuffer buffer = ByteBuffer.allocate(8);","buffer.putInt(MAGIC_TABLE);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);","}"],"amountOfLines":8}}]}},{"cloneClass":{"cloneClassName":"block([if(simpleName(\"\"),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\"),simpleName(\"\")])),return(null())])),return(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))])","amountOfDuplications":2,"treeSize":23,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/Index.java","lines":[350,351,352,353,354,355,356],"code":["if(i == 0){","if(isLastValue){","node.addNode( digit, rowOffset );","return null;","}","return node.addRoot(digit);","}"],"amountOfLines":7}},{"duplication":{"filePath":"/src/smallsql/database/Index.java","lines":[409,410,411,412,413,414,415],"code":["if(++i == length){","if(isLast){","node.addNode( digit, rowOffset );","return null;","}","return node.addRoot(digit);","}"],"amountOfLines":7}}]}},{"cloneClass":{"cloneClassName":"if(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"\\<\",simpleName(\"\")),block([expressionStatement(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]))]),if(infix(qualifiedName(simpleName(\"\"),simpleName(\"\")),\"\\>\",simpleName(\"\")),block([expressionStatement(methodCall(false,\"\",[qualifiedName(simpleName(\"\"),simpleName(\"\"))]))])))","amountOfDuplications":2,"treeSize":39,"duplications":[{"duplication":{"filePath":"/src/smallsql/database/MutableNumeric.java","lines":[166,167,168,169,170,171],"code":["if(num.scale < scale){","num.setScale(scale);","}else","if(num.scale > scale){","setScale(num.scale);","}"],"amountOfLines":6}},{"duplication":{"filePath":"/src/smallsql/database/MutableNumeric.java","lines":[234,235,236,237,238,239],"code":["if(num.scale < scale){","num.setScale(scale);","}else","if(num.scale > scale){","setScale(num.scale);","}"],"amountOfLines":6}}]}},{"cloneClass":{"cloneClassName":"while(infix(infix(simpleName(\"\"),\"!=\",null()),\"&&\",methodCall(false,simpleName(\"\"),\"\",[])),block([declarationStatement(variables(void(),[variable(\"\",0,methodCall(false,simpleName(\"\"),\"\",[stringLiteral(\"\\\"v\\\"\")]))])),if(infix(simpleName(\"\"),\"!=\",null()),block([expressionStatement(methodCall(false,\"\",[infix(methodCall(false,simpleName(\"\"),\"\",[simpleName(\"\")]),\"\\>\",number(\"0\"))])),expressionStatement(postfix(simpleName(\"\"),\"++\"))])),expressionStatement(assignment(simpleName(\"\"),\"=\",simpleName(\"\")))]))","amountOfDuplications":2,"treeSize":59,"duplications":[{"duplication":{"filePath":"/src/smallsql/junit/TestOrderBy.java","lines":[210,211,212,213,214,215,216,217],"code":["while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) > 0 );","count++;","}","oldValue = newValue;","}"],"amountOfLines":8}},{"duplication":{"filePath":"/src/smallsql/junit/TestOrderBy.java","lines":[238,239,240,241,242,243,244,245],"code":["while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) > 0 );","count++;","}","oldValue = newValue;","}"],"amountOfLines":8}}]}}]